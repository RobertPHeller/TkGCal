#*****************************************************************************
#
#  System        : 
#  Module        : 
#  Object Name   : $RCSfile$
#  Revision      : $Revision$
#  Date          : $Date$
#  Author        : $Author$
#  Created By    : Robert Heller
#  Created       : Sat Apr 13 13:35:58 2024
#  Last Modified : <240413.2024>
#
#  Description	
#
#  Notes
#
#  History
#	
#*****************************************************************************
## @copyright
#    Copyright (C) 2024  Robert Heller D/B/A Deepwoods Software
#			51 Locke Hill Road
#			Wendell, MA 01379-9728
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
# @file TkGCal.tcl
# @author Robert Heller
# @date Sat Apr 13 13:35:58 2024
# 
#
#*****************************************************************************


package require snit
package require Tk
package require tile
package require MainWindow
package require ScrollWindow
package require ROText
snit::widget TkGCal {
    typevariable GCALCLI {@GCALCLI@}
    proc filterVT100 {string} {
        set string [regsub -all [format {%c\(0q%c\(B} 27 27] $string {─}]
        set string [regsub -all [format {%c\(0x%c\(B} 27 27] $string {│}]
        set string [regsub -all [format {%c\(0j%c\(B} 27 27] $string {┘}]
        set string [regsub -all [format {%c\(0k%c\(B} 27 27] $string {┐}]
        set string [regsub -all [format {%c\(0l%c\(B} 27 27] $string {┌}]
        set string [regsub -all [format {%c\(0m%c\(B} 27 27] $string {└}]
        set string [regsub -all [format {%c\(0n%c\(B} 27 27] $string {┼}]
        set string [regsub -all [format {%c\(0t%c\(B} 27 27] $string {├}]
        set string [regsub -all [format {%c\(0u%c\(B} 27 27] $string {┤}]
        set string [regsub -all [format {%c\(0v%c\(B} 27 27] $string {┴}]
        set string [regsub -all [format {%c\(0w%c\(B} 27 27] $string {┬}]
        return $string
    }
    proc AgendaCommand {start end} {
        return [list $GCALCLI --nocolor agenda --details end $start $end]
    }
    proc AgendaAllCommand {start end} {
        return [list $GCALCLI --nocolor agenda --details all $start $end]
    }
    proc CalWeekCommand {start weeks} {
        return [list $GCALCLI --nocolor calw $start $weeks]
    }
    proc ReminderCommand {minutes} {
        return [list $GCALCLI remind --use-reminders 15]
    }
    proc AddCommand {args} {
        return [concat  $GCALCLI add --noprompt $args]
    }
    typecomponent mainwindow
    typecomponent calendar
    typecomponent daysagenda
    typecomponent   daysagenda_date
    typecomponent   daysagenda_agenda
    typevariable ImageDir
    typeconstructor {
        set ImageDir [file join [file dirname [file dirname [info script]]] Common]
        #puts stderr "*** typeconstructor: ImageDir is $ImageDir"
        set leftArrow [image create bitmap  -file [file join $ImageDir left.xbm]]
        set rightArrow [image create bitmap  -file [file join $ImageDir right.xbm]]
        ttk::style layout flatbutton [ttk::style layout TButton]
        foreach {o v} [ttk::style configure TButton] {
            ttk::style configure flatbutton $o $v
        }
        ttk::style configure flatbutton -relief flat
        ttk::style layout headlabel [ttk::style layout TLabel]
        foreach {o v} [ttk::style configure TLabel] {
            ttk::style configure headlabel $o $v
        }
        ttk::style configure headlabel -font [font create -family Times \
                                              -size 20 -weight bold]
        ttk::style layout weekendlabel [ttk::style layout TLabel]
        foreach {o v} [ttk::style configure TLabel] {
            ttk::style configure weekendlabel $o $v
        }
        ttk::style configure weekendlabel \
              -font [font create -family Times -slant italic] \
              -foreground red
        ttk::style layout weekdaylabel [ttk::style layout TLabel]
        foreach {o v} [ttk::style configure TLabel] {
            ttk::style configure weekdaylabel $o $v
        }
        ttk::style configure weekdaylabel -font [font create -family Times \
                                            -slant roman]
        ttk::style layout weekendbutton [ttk::style layout TButton]
        ttk::style configure weekendbutton -relief flat
        ttk::style configure weekendbutton -font [font create -family Times -slant italic] \
              -foreground blue
        ttk::style layout weekdaybutton [ttk::style layout TButton]
        ttk::style configure weekdaybutton -relief flat
        ttk::style configure weekdaybutton -font [font create -family Times -slant roman] \
              -foreground blue
        
        global argv
        global argv0
        set mainwindow [mainwindow .mainwindow -scrolling false]
        pack $mainwindow -expand yes -fill both
        set daysagenda [$mainwindow slideout add DaysAgenda]
        set daysagenda_date [ttk::labelframe $daysagenda.date -labelanchor n \
                             -text "The Date"]
        pack $daysagenda_date -expand yes -fill both
        set scrollw [ScrolledWindow $daysagenda_date.scrollw \
                     -scrollbar both -auto both]
        pack $scrollw -expand yes -fill both
        set daysagenda_agenda [ROText [$scrollw getframe].agenda -width 100]
        $scrollw setwidget $daysagenda_agenda
        pack [ttk::button $daysagenda.close -text "Close" \
              -command [list $mainwindow slideout hide DaysAgenda]] \
              -expand yes -fill x
        set frame [$mainwindow scrollwindow getframe]
        set calendar [TkGCal create $frame.tkgcal \
                      -labelframe $daysagenda_date \
                      -rotext $daysagenda_agenda \
                      -showagenda [list $mainwindow slideout show DaysAgenda]]
        $mainwindow scrollwindow setwidget $calendar
        if {[set index [lsearch -exact $argv -iconic]] < 0} {
            $mainwindow showit
        } else {
            set argv [lreplace $argv $index $index]
        }
    }
    component month
    component year
    component calframe
    typevariable leftArrow
    typevariable rightArrow
    variable currentMonth
    variable currentYear
    option -xscrollcommand
    option -yscrollcommand
    option -labelframe -default {}
    option -rotext -default {}
    option -showagenda -default {}
    constructor {args} {
        set currentMonth [clock format [clock scan now] -format %B]
        set currentYear [clock format [clock scan now] -format %Y]
        set headframe [ttk::frame $win.headframe -relief groove -borderwidth 3]
        pack $headframe -fill x
        set prevmonth [ttk::button $headframe.prevmonth \
                       -style flatbutton -command [mymethod _prevMonth] \
                       -image $leftArrow]
        pack $prevmonth -side left
        install month using ttk::label $headframe.month \
              -textvariable [myvar currentMonth] -style headlabel \
              -justify center -anchor center
        pack $month -side left -fill x -expand yes
        set nextmonth [ttk::button $headframe.nextmonth \
                       -style flatbutton -command [mymethod _nextMonth] \
                       -image $rightArrow]
        pack $nextmonth -side left
        set prevyear [ttk::button $headframe.prevyear \
                      -style flatbutton -command [mymethod _prevYear] \
                      -image $leftArrow]
        pack $prevyear -side left
        install year using ttk::label $headframe.year \
              -textvariable [myvar currentYear]  -style headlabel \
              -justify center -anchor center
        pack $year -side left -fill x -expand yes
        set nextyear [ttk::button $headframe.nextyear \
                      -style flatbutton -command [mymethod _nextYear] \
                      -image $rightArrow]
        pack $nextyear -side left
        install calframe using ttk::frame $win.calframe \
              -relief groove -borderwidth 3 -padding {50 0 50 50}
        pack $calframe -fill both 
        foreach d {Sun Mon Tue Wed Thu Fri Sat} i {0 1 2 3 4 5 6} \
              s {weekendlabel weekdaylabel weekdaylabel weekdaylabel weekdaylabel weekdaylabel weekendlabel} {\
              grid configure [ttk::label $calframe.[string tolower $d] \
                              -text $d -style $s] -column $i -row 0 -sticky news
        }
        $self configurelist $args
        $self _populateCurrentMonth
    }
    method _populateCurrentMonth {} {
        set rows [lindex [grid size $calframe] 1]
        if {$rows > 1} {
            for {set irow [expr {$rows - 1}]} {$irow > 0} {incr irow -1} {
                foreach s [grid slaves $calframe -row $irow] {
                    destroy $s
                }
            }
        }
        set day [clock scan [format "%s/1/%d" $currentMonth $currentYear] -format {%B/%d/%Y}]
        set start [clock format $day -format {%m/%d/%Y}]
        set lastday [clock add $day 1 month -1 day]
        set end [clock format $lastday -format {%m/%d/%Y}]
        set cmd [AgendaCommand $start $end]
        #puts stderr "*** $self _populateCurrentMonth: cmd is \{$cmd\}"
        set dates [eval [concat exec $cmd]]
        #puts stderr "*** $self _populateCurrentMonth: dates is \{$dates\}"
        set gridrow 1
        while {[clock format $day -format %B] eq $currentMonth} {
            set dayofweek [clock format $day -format %w]
            set date      [clock format $day -format %e]
            set day1 [clock add $day 1 day]
            set pattern [clock format $day -format {^%a %b %d}]
            #puts stderr "*** $self _populateCurrentMonth: pattern is \{$pattern\}"
            if {[regexp -line $pattern $dates] < 1} {
                # no events
                if {$dayofweek == 0 || $dayofweek == 6} {
                    set style weekendlabel
                } else {
                    set style weekdaylabel
                }
                grid configure [ttk::label $calframe.d_$date \
                                -text $date -anchor e -style $style] \
                      -row $gridrow -column $dayofweek
            } else {
                # has events
                if {$dayofweek == 0 || $dayofweek == 6} {
                    set style weekendbutton
                } else {
                    set style weekdaybutton
                }
                grid configure [ttk::button $calframe.d_$date \
                                -text $date -style $style \
                                -command [mymethod _showdate $day]] \
                       -row $gridrow -column $dayofweek
            }
            if {$dayofweek == 6} {incr gridrow}
            set day $day1
        }
    }
    method _prevMonth {} {
        set day [clock scan [format "%s/1/%d" $currentMonth $currentYear] -format {%B/%d/%Y}]
        set day [clock add $day -1 month]
        set currentMonth [clock format $day -format %B]
        set currentYear  [clock format $day -format %Y]
        $self _populateCurrentMonth
    }
    method _nextMonth {} {
        set day [clock scan [format "%s/1/%d" $currentMonth $currentYear] -format {%B/%d/%Y}]
        set day [clock add $day 1 month]
        set currentMonth [clock format $day -format %B]
        set currentYear  [clock format $day -format %Y]
        $self _populateCurrentMonth
    }
    method _prevYear {} {
        incr currentYear -1
        $self _populateCurrentMonth
    }
    method _nextYear {} {
        incr currentYear
        $self _populateCurrentMonth
    }
    variable agendaFP
    variable agendaDone
    method _showdate {day} {
        if {$options(-labelframe) ne {}} {
            $options(-labelframe) configure \
                  -text [clock format $day -format {%A %B %e, %Y}]
        }
        set tomorrow [clock add $day 1 day]
        set start [clock format $day -format {%m/%d/%Y}]
        set end   [clock format $tomorrow -format {%m/%d/%Y}]
        if {$options(-rotext) ne {}} {
            $options(-rotext) delete 1.0 end
        }
        set agendaDone 0
        set agendaFP [open "|[AgendaAllCommand $start $end]" r]
        fileevent $agendaFP readable [mymethod _processAgendaPipe]
        tkwait variable agendaDone
    }
    method _processAgendaPipe {} {
        if {[gets $agendaFP line] < 0} {
            catch {close $agendaFP}
            if {$options(-showagenda) ne {}} {
                uplevel #0 $options(-showagenda)
            }
            incr agendaDone
        }
        if {$options(-rotext) ne {}} {
            $options(-rotext) insert end "[filterVT100 $line]\n"
        }
    }
}
